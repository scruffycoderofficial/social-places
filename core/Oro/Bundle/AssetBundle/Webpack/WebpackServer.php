<?php

namespace Oro\Bundle\AssetBundle\Webpack;

use GuzzleHttp\Client;
use GuzzleHttp\Psr7\Request;
use Psr\Http\Client\ClientInterface;

/**
 * Accessor for webpack-dev-server status and options
 */
class WebpackServer
{
    /**
     * @var ClientInterface|null
     */
    private $client;

    /**
     * @var bool
     */
    private $isRunning;

    /**
     * @var array
     */
    private $webpackDevServerOptions;

    /**
     * @param array $webpackDevServerOptions
     */
    public function __construct(array $webpackDevServerOptions)
    {
        $this->webpackDevServerOptions = $webpackDevServerOptions;
    }

    /**
     * @return bool
     */
    public function isRunning(): bool
    {
        if (!$this->isEnabled()) {
            return false;
        }

        if (null === $this->isRunning) {
            $url = $this->getServerUrl();
            try {
                $request = new Request('HEAD', $url);
                $response = $this->getClient()
                    ->sendRequest($request);

                $this->isRunning = $response->getStatusCode() === 200 &&
                    $response->hasHeader('x-powered-by') &&
                    array_search('Express', $response->getHeader('x-powered-by'));
            } catch (\Exception $exception) {
                return false;
            }
        }

        return $this->isRunning;
    }

    /**
     * @param string $url
     * @return string
     */
    public function getServerUrl(string $url = ''): string
    {
        $url = str_replace('.css', '.bundle.js', $url);
        $url = ltrim($url, '/');

        $http = $this->webpackDevServerOptions['https'] ? 'https' : 'http';
        $devServerHost = $this->webpackDevServerOptions['host'];
        $devServerPort = $this->webpackDevServerOptions['port'];

        return sprintf('%s://%s:%s/%s', $http, $devServerHost, $devServerPort, $url);
    }

    /**
     * @return ClientInterface
     */
    private function getClient(): ClientInterface
    {
        if (!$this->client) {
            $this->client = new Client(
                [
                    'timeout' => 0.5,
                    // Skip SSL verification to allow using self signed
                    // certificate autogenerated by webpack-dev-server
                    'verify' => false,
                ]
            );
        }

        return $this->client;
    }

    /**
     * @return bool
     */
    private function isEnabled(): bool
    {
        return $this->webpackDevServerOptions['enable_hmr'];
    }
}
